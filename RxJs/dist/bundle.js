/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};function n(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}function r(t,n){var r,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,e&&(o=2&i[0]?e.return:i[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,i[1])).done)return o;switch(e=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,e=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],e=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function e(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,i=r.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function i(t,n){for(var r=0,e=n.length,o=t.length;r<e;r++,o++)t[o]=n[r];return t}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=r.apply(t,n||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(t){o[t]&&(e[t]=function(n){return new Promise((function(r,e){i.push([t,n,r,e])>1||s(t,n)}))})}function s(t,n){try{(r=o[t](n)).value instanceof u?Promise.resolve(r.value.v).then(a,l):f(i[0][2],r)}catch(t){f(i[0][3],t)}var r}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}function s(t){return"function"==typeof t}Object.create,Object.create;var a,l=((a=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function f(t,n){if(t){var r=t.indexOf(n);0<=r&&t.splice(r,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,n,r,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=e(a),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(n){t={error:n}}finally{try{h&&!h.done&&(n=f.return)&&n.call(f)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(t){c=t instanceof l?t.errors:[t]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=e(v),b=y.next();!b.done;b=y.next()){var w=b.value;try{d(w)}catch(t){c=null!=c?c:[],t instanceof l?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(r)throw r.error}}}if(c)throw new l(c)}},t.prototype.add=function(n){var r;if(n&&n!==this)if(this.closed)d(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(r=this._teardowns)&&void 0!==r?r:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&f(n,t)},t.prototype.remove=function(n){var r=this._teardowns;r&&f(r,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function p(t){return t instanceof h||t&&"closed"in t&&s(t.remove)&&s(t.add)&&s(t.unsubscribe)}function d(t){s(t)?t():t.unsubscribe()}h.EMPTY;var v=function(t){function r(n,r){return t.call(this)||this}return n(r,t),r.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},r}(h),y={setInterval:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=y.delegate;return((null==r?void 0:r.setInterval)||setInterval).apply(void 0,i([],o(t)))},clearInterval:function(t){var n=y.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},b=function(t){function r(n,r){var e=t.call(this,n,r)||this;return e.scheduler=n,e.work=r,e.pending=!1,e}return n(r,t),r.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var r=this.id,e=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(e,r,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(e,this.id,n),this},r.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),y.setInterval(t.flush.bind(t,this),r)},r.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return n;y.clearInterval(n)},r.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,n);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(t,n){var r,e=!1;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},r.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,r=this.scheduler,e=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(e,this),null!=n&&(this.id=this.recycleAsyncId(r,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},r}(v),w={now:function(){return(w.delegate||Date).now()},delegate:void 0},m=function(){function t(n,r){void 0===r&&(r=t.now),this.schedulerActionCtor=n,this.now=r}return t.prototype.schedule=function(t,n,r){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(r,n)},t.now=w.now,t}(),_=new(function(t){function r(n,r){void 0===r&&(r=m.now);var e=t.call(this,n,r)||this;return e.actions=[],e._active=!1,e._scheduled=void 0,e}return n(r,t),r.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,r){for(;t=n.shift();)t.unsubscribe();throw r}}},r}(m))(b),g=_,x=null,S=null,E=void 0,I=!1,T=!1,A={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=A.delegate;return((null==r?void 0:r.setTimeout)||setTimeout).apply(void 0,i([],o(t)))},clearTimeout:function(t){var n=A.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function P(t){A.setTimeout((function(){if(!x)throw t;x(t)}))}function k(){}var O=j("C",void 0,void 0);function j(t,n,r){return{kind:t,value:n,error:r}}var C=function(t){function r(n){var r=t.call(this)||this;return r.isStopped=!1,n?(r.destination=n,p(n)&&n.add(r)):r.destination=q,r}return n(r,t),r.create=function(t,n,r){return new Y(t,n,r)},r.prototype.next=function(t){this.isStopped?R(function(t){return j("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?R(j("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?R(O,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(h),Y=function(t){function r(n,r,e){var o,i=t.call(this)||this;if(s(n))o=n;else if(n){var u;o=n.next,r=n.error,e=n.complete,i&&T?(u=Object.create(n)).unsubscribe=function(){return i.unsubscribe()}:u=n,o=null==o?void 0:o.bind(u),r=null==r?void 0:r.bind(u),e=null==e?void 0:e.bind(u)}return i.destination={next:o?H(o,i):k,error:H(null!=r?r:N,i),complete:e?H(e,i):k},i}return n(r,t),r}(C);function H(t,n){return function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];try{t.apply(void 0,i([],o(r)))}catch(t){if(I){if(!n._syncErrorHack_isSubscribing)throw t;n.__syncError=t}else P(t)}}}function N(t){throw t}function R(t,n){var r=S;r&&A.setTimeout((function(){return r(t,n)}))}var q={closed:!0,next:k,error:N,complete:k},z="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(t){return t}function F(t){return 0===t.length?D:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e,o=(e=t)&&e instanceof C||function(t){return t&&s(t.next)&&s(t.error)&&s(t.complete)}(e)&&p(e)?t:new Y(t,n,r);if(I)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var n=t;n._syncErrorHack_isSubscribing=!0;var r=this.operator;if(r)t.add(r.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){n.__syncError=t}for(var e=n;e;){if("__syncError"in e)try{throw e.__syncError}finally{t.unsubscribe()}e=e.destination}n._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=U(n))((function(n,e){var o;o=r.subscribe((function(n){try{t(n)}catch(t){e(t),null==o||o.unsubscribe()}}),e,n)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[z]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.length?F(t)(this):this},t.prototype.toPromise=function(t){var n=this;return new(t=U(t))((function(t,r){var e;n.subscribe((function(t){return e=t}),(function(t){return r(t)}),(function(){return t(e)}))}))},t.create=function(n){return new t(n)},t}();function U(t){var n;return null!==(n=null!=t?t:E)&&void 0!==n?n:Promise}function $(t){return t&&s(t.schedule)}function G(t,n){return void 0===t&&(t=0),void 0===n&&(n=_),t<0&&(t=0),function(t,n,r){void 0===t&&(t=0),void 0===r&&(r=g);var e=-1;return null!=n&&($(n)?r=n:e=n),new M((function(n){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-r.now():t;i<0&&(i=0);var u=0;return r.schedule((function(){n.closed||(n.next(u++),0<=e?this.schedule(void 0,e):n.complete())}),i)}))}(t,t,n)}function L(t){return function(n){if(function(t){return s(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var B=function(t){function r(n,r,e,o,i){var u=t.call(this,n)||this;return u.onFinalize=i,u._next=r?function(t){try{r(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=e?function(){try{e()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(r,t),r.prototype.unsubscribe=function(){var n,r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(n=this.onFinalize)||void 0===n||n.call(this))},r}(C);function J(t,n){return L((function(r,e){var o=0;r.subscribe(new B(e,(function(r){e.next(t.call(n,r,o++))})))}))}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){if(t instanceof M)return t;if(null!=t){if(function(t){return s(t[z])}(t))return l=t,new M((function(t){var n=l[z]();if(s(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((a=t)&&"number"==typeof a.length&&"function"!=typeof a)return V(t);if(s(null==(i=t)?void 0:i.then))return o=t,new M((function(t){o.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,P)}));if(function(t){return Symbol.asyncIterator&&s(null==t?void 0:t[Symbol.asyncIterator])}(t))return W(t);if(function(t){return s(null==t?void 0:t[K])}(t))return n=t,new M((function(t){var r,o;try{for(var i=e(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){r={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return s(null==t?void 0:t.getReader)}(t))return W(function(t){return c(this,arguments,(function(){var n,e,o;return r(this,(function(r){switch(r.label){case 0:n=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(n.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var n,o,i,a,l;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function V(t){return new M((function(n){for(var r=0;r<t.length&&!n.closed;r++)n.next(t[r]);n.complete()}))}function W(t){return new M((function(n){(function(t,n){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,r=t[Symbol.asyncIterator];return r?r.call(t):(t=e(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(r){n[r]=t[r]&&function(n){return new Promise((function(e,o){!function(t,n,r,e){Promise.resolve(e).then((function(n){t({value:n,done:r})}),n)}(e,o,(n=t[r](n)).done,n.value)}))}}}(t),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=r.sent(),u={error:a},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function r(t){try{o(f.next(t))}catch(t){n(t)}}function e(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(r,e)}o((f=f.apply(s,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function X(t,n,r){return void 0===r&&(r=1/0),s(n)?X((function(r,e){return J((function(t,o){return n(r,t,e,o)}))(Q(t(r,e)))}),r):("number"==typeof n&&(r=n),L((function(n,e){return function(t,n,r,e,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||n.complete()},p=function(t){return a<e?d(t):s.push(t)},d=function(t){a++;var o=!1;Q(r(t,l++)).subscribe(new B(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<e;)t=void 0,t=s.shift(),d(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(new B(n,p,(function(){f=!0,h()}))),function(){}}(n,e,t,r)})))}function Z(t){return void 0===t&&(t=1/0),X(D,t)}function tt(t,n){return n?function(t,n){return new M((function(r){var e=0;return n.schedule((function(){e===t.length?r.complete():(r.next(t[e++]),r.closed||this.schedule())}))}))}(t,n):V(t)}var nt=new M((function(t){return t.complete()}));function rt(t){return t[t.length-1]}function et(t){return $(rt(t))?t.pop():void 0}function ot(t,n){return"number"==typeof rt(t)?t.pop():n}function it(t){return t<=0?function(){return nt}:L((function(n,r){var e=0;n.subscribe(new B(r,(function(n){++e<=t&&(r.next(n),t<=e&&r.complete())})))}))}(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=et(t),e=ot(t,1/0),o=t;return o.length?1===o.length?Q(o[0]):Z(e)(tt(o,r)):nt})(G(500).pipe(J((t=>`prvi ${t}`)),it(5)),G(1500).pipe(J((t=>`drugi ${t}`)),it(7))).subscribe((t=>console.log(t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,