/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}function u(e){return this instanceof u?(this.v=e,this):new u(e)}function c(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof u?Promise.resolve(n.value.v).then(s,l):f(i[0][2],n)}catch(e){f(i[0][3],e)}var n}function s(e){a("next",e)}function l(e){a("throw",e)}function f(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function a(e){return"function"==typeof e}Object.create,Object.create;var s,l=((s=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var f=r(s),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else s.remove(this);var h=this.initialTeardown;if(a(h))try{h()}catch(e){c=e instanceof l?e.errors:[e]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var b=r(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{p(m)}catch(e){c=null!=c?c:[],e instanceof l?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{y&&!y.done&&(u=b.return)&&u.call(b)}finally{if(n)throw n.error}}}if(c)throw new l(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)p(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}();function h(e){return e instanceof d||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function p(e){a(e)?e():e.unsubscribe()}d.EMPTY;var v=null,b=null,y=void 0,m=!1,w=!1,g={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=g.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,i([],o(e)))},clearTimeout:function(e){var t=g.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function E(e){g.setTimeout((function(){if(!v)throw e;v(e)}))}function C(){}var _=x("C",void 0,void 0);function x(e,t,n){return{kind:e,value:t,error:n}}var S=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=L,n}return t(n,e),n.create=function(e,t,n){return new I(e,t,n)},n.prototype.next=function(e){this.isStopped?T(function(e){return x("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?T(x("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?T(_,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),I=function(e){function n(t,n,r){var o,i=e.call(this)||this;if(a(t))o=t;else if(t){var u;o=t.next,n=t.error,r=t.complete,i&&w?(u=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:u=t,o=null==o?void 0:o.bind(u),n=null==n?void 0:n.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?k(o,i):C,error:k(null!=n?n:O,i),complete:r?k(r,i):C},i}return t(n,e),n}(S);function k(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{e.apply(void 0,i([],o(n)))}catch(e){if(m){if(!t._syncErrorHack_isSubscribing)throw e;t.__syncError=e}else E(e)}}}function O(e){throw e}function T(e,t){var n=b;n&&g.setTimeout((function(){return n(e,t)}))}var L={closed:!0,next:C,error:O,complete:C},P="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(e){return e}function B(e){return 0===e.length?A:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var N=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=(r=e)&&r instanceof S||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&h(r)?e:new I(e,t,n);if(m)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},e.prototype._deprecatedSyncErrorSubscribe=function(e){var t=e;t._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)e.add(n.call(e,this.source));else try{e.add(this._subscribe(e))}catch(e){t.__syncError=e}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{e.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=j(t))((function(t,r){var o;o=n.subscribe((function(t){try{e(t)}catch(e){r(e),null==o||o.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[P]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?B(e)(this):this},e.prototype.toPromise=function(e){var t=this;return new(e=j(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function j(e){var t;return null!==(t=null!=e?e:y)&&void 0!==t?t:Promise}var D=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function M(e){return a(null==e?void 0:e.then)}function H(e,t){return new N((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(e,t){if(!e)throw new Error("Iterable cannot be null");return new N((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[Symbol.asyncIterator]();r.add(t.schedule((function(){var e=this;o.next().then((function(t){t.done?n.complete():(n.next(t.value),e.schedule())}))})))}))),r}))}function Y(e){return a(e[P])}function G(e){return a(null==e?void 0:e[F])}function R(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function $(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function z(e){return c(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function J(e){return a(null==e?void 0:e.getReader)}function K(e,t){return t?function(e,t){if(null!=e){if(Y(e))return function(e,t){return new N((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[P]();r.add(o.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}(e,t);if(D(e))return H(e,t);if(M(e))return function(e,t){return new N((function(n){return t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){n.next(e),n.add(t.schedule((function(){return n.complete()})))})))}),(function(e){n.add(t.schedule((function(){return n.error(e)})))}))}))}))}(e,t);if(R(e))return U(e,t);if(G(e))return function(e,t){return new N((function(n){var r;return n.add(t.schedule((function(){r=e[F](),function(e,t,n,r){void 0===r&&(r=0);var o=t.schedule((function(){try{n.call(this)}catch(t){e.error(t)}}),r);e.add(o)}(n,t,(function(){var e=r.next(),t=e.value;e.done?n.complete():(n.next(t),this.schedule())}))}))),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(J(e))return function(e,t){return U(z(e),t)}(e,t)}throw $(e)}(e,t):q(e)}function q(e){if(e instanceof N)return e;if(null!=e){if(Y(e))return o=e,new N((function(e){var t=o[P]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(D(e))return Q(e);if(M(e))return n=e,new N((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,E)}));if(R(e))return V(e);if(G(e))return t=e,new N((function(e){var n,o;try{for(var i=r(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(J(e))return V(z(e))}var t,n,o;throw $(e)}function Q(e){return new N((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function V(e){return new N((function(t){(function(e,t){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),u={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(f.next(e))}catch(e){t(e)}}function r(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((f=f.apply(a,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}var W=Array.isArray;function X(e){return 1===e.length&&W(e[0])?e[0]:e}var Z=new N((function(e){return e.complete()})),ee=function(e){function n(t,n,r,o,i){var u=e.call(this,t)||this;return u.onFinalize=i,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return t(n,e),n.prototype.unsubscribe=function(){var t,n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},n}(S);function te(e){return e[e.length-1]}function ne(e){return a(te(e))?e.pop():void 0}function re(e){return(t=te(e))&&a(t.schedule)?e.pop():void 0;var t}var oe=Array.isArray,ie=Object.getPrototypeOf,ue=Object.prototype,ce=Object.keys;function ae(e){if(1===e.length){var t=e[0];if(oe(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&ie(r)===ue){var n=ce(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}function se(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function le(e,t){return se((function(n,r){var o=0;n.subscribe(new ee(r,(function(n){r.next(e.call(t,n,o++))})))}))}var fe=Array.isArray;function de(e){return le((function(t){return function(e,t){return fe(t)?e.apply(void 0,i([],o(t))):e(t)}(e,t)}))}function he(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}function pe(e,t,n){return void 0===n&&(n=A),function(r){ve(t,(function(){for(var o=e.length,i=new Array(o),u=o,c=o,a=function(o){ve(t,(function(){var a=K(e[o],t),s=!1;a.subscribe(new ee(r,(function(e){i[o]=e,s||(s=!0,c--),c||r.next(n(i.slice()))}),(function(){--u||r.complete()})))}),r)},s=0;s<o;s++)a(s)}),r)}}function ve(e,t,n){e?n.add(e.schedule(t)):t()}function be(e,t,n){return void 0===n&&(n=1/0),a(t)?be((function(n,r){return le((function(e,o){return t(n,e,r,o)}))(q(e(n,r)))}),n):("number"==typeof t&&(n=t),se((function(t,r){return function(e,t,n,r,o,i,u,c){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||t.complete()},h=function(e){return s<r?p(e):a.push(e)},p=function(e){s++;var o=!1;q(n(e,l++)).subscribe(new ee(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)e=void 0,e=a.shift(),p(e);d()}catch(e){t.error(e)}var e})))};return e.subscribe(new ee(t,h,(function(){f=!0,d()}))),function(){}}(t,r,e,n)})))}var ye=["addListener","removeListener"],me=["addEventListener","removeEventListener"],we=["on","off"];function ge(e,t,n,r){if(a(n)&&(r=n,n=void 0),r)return ge(e,t,n).pipe(de(r));var i=o(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?me.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?ye.map(Ee(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?we.map(Ee(e,t)):[],2),u=i[0],c=i[1];if(!u&&D(e))return be((function(e){return ge(e,t,n)}))(Q(e));if(!u)throw new TypeError("Invalid event target");return new N((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return c(t)}}))}function Ee(e,t){return function(n){return function(r){return e[n](t,r)}}}function Ce(e,t){return se((function(n,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};n.subscribe(new ee(r,(function(n){null==o||o.unsubscribe();var u=0,a=i++;q(e(n,a)).subscribe(o=new ee(r,(function(e){return r.next(t?t(n,e,a,u++):e)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}class _e{constructor(){this.loadDbmsCard()}loadDbmsCard(){this.cardCollectionObservable=this.getAllCardsObservableFromJsonServer("","")}getAllCardsObservableFromJsonServer(e,t){if(t=t.toLowerCase(),""===e)var n=fetch("http://localhost:3000/cards");else n=fetch(`http://localhost:3000/cards?${t}=`+e);return K(n.then((e=>{if(e.ok)return e.json();throw new Error("Cards not found")})).catch((e=>console.log("Error ",e))))}deleteCard(e){return this.cardCollectionObservable.pipe(le((t=>t.filter((t=>t!==e)))))}checkCardAttributeForSearch(e,t){return"attack"===(t=t.toLowerCase())?e.attack:"deffense"===t?e.deffense:"title"===t?e.title:e.stars}search(e,t){return""!==e?K(this.cardCollectionObservable.pipe(le((n=>n.filter((n=>this.checkCardAttributeForSearch(n,t)==e)))))):this.cardCollectionObservable}sort(){return K(this.cardCollectionObservable.pipe(le((e=>this.randomOrderSorter(e)))))}randomOrderPromiseGenerator(e){return new Promise(((t,n)=>{let r=[],o=0,i=!1,u=0;for(;o!==e;)i=!1,u=Math.round(Math.random()*e),0===o?(r.push(u),o++):(r.forEach(((e,t)=>{u===e&&(i=!0)})),!1===i&&(r.push(u),o++));t(r)}))}async randomOrderSorter(e){let t=await this.randomOrderPromiseGenerator(e.length-1),n=[];return t.forEach(((t,r)=>{n.push(e[t])})),n}}new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("comboBoxInput")[0].value)}),1e3)})),new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("searchInput")[0].value)}),1e3)}));const xe=new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("comboBoxInput")[0].value)}),1e3)})),Se=new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("searchInput")[0].value)}),1e3)}));new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("comboBoxInput")[0].value)}),1e3)})),new N((e=>{setInterval((()=>{e.next(document.getElementsByClassName("searchInput")[0].value)}),1e3)}));const Ie=new class{constructor(){this.testCards=[],this.cardCollection=new _e}drawList(){document.getElementById("cardDetail").innerHTML="",document.getElementById("output").innerHTML="",this.cardCollection.cardCollectionObservable.pipe(Ce((e=>this.search()))).subscribe((e=>{void 0!==e[0]&&""!==e[0].title&&(document.getElementById("output").innerHTML="",e.forEach((e=>{this.addItem(e)})))}))}testSort(e){return this.testSortButton(e),this.cardCollection.randomOrderSorter(e)}testSortButton(e){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=ne(e),r=X(e);return r.length?new N((function(e){var t=r.map((function(){return[]})),u=r.map((function(){return!1}));e.add((function(){t=u=null}));for(var c=function(c){q(r[c]).subscribe(new ee(e,(function(r){if(t[c].push(r),t.every((function(e){return e.length}))){var a=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,i([],o(a))):a),t.some((function(e,t){return!e.length&&u[t]}))&&e.complete()}}),(function(){u[c]=!0,!t[c].length&&e.complete()})))},a=0;!e.closed&&a<r.length;a++)c(a);return function(){t=u=null}})):Z}(ge(document.getElementsByClassName("sortCards")[0],"click"),this.cardCollection.randomOrderSorter(e)).pipe(Ce((t=>this.cardCollection.randomOrderSorter(e)))).subscribe((e=>{this.testCards=e,console.log(this.testCards)})),this.testCards}search(){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=re(e),r=ne(e),o=ae(e),i=o.args,u=o.keys;if(0===i.length)return K([],n);var c=new N(pe(i,n,u?function(e){return he(u,e)}:A));return r?c.pipe(de(r)):c}([xe,Se]).pipe(Ce((e=>this.cardCollection.search(e[1],e[0]))))}addItem(e){let t=document.createElement("div");t.className="mainSingleCardDiv",document.getElementById("output").appendChild(t);let n=document.createElement("div");n.className="cardUiStyle",n.id="test",t.appendChild(n);let r=document.createElement("img");r.src=e.imgPath,r.className="cardUiImg",n.appendChild(r);let o=document.createElement("div");o.className="cardInfoDiv",n.appendChild(o);let i=document.createElement("label");i.innerHTML="Name: "+e.title,o.appendChild(i);let u=document.createElement("label");u.innerHTML="Level: "+e.stars,o.appendChild(u);let c=document.createElement("label");c.innerHTML="Attribute: "+e.attribute,o.appendChild(c);let a=document.createElement("label");a.innerHTML=`ATK: ${e.attack} DEF: ${e.deffense}`,o.appendChild(a);let s=document.createElement("div");n.appendChild(s);let l=document.createElement("button");l.className="cardDeleteButton",l.innerHTML="DELETE",t.appendChild(l),n.onclick=()=>{this.divClicked(e)},l.onclick=()=>{this.deleteClicked(e)}}divClicked(e){console.log(e.title+" clicked"),document.getElementById("cardDetail").innerHTML="";let t=document.createElement("div");t.className="cardDetailDiv",document.getElementById("cardDetail").appendChild(t);let n=document.createElement("img");n.src=e.imgPath,t.appendChild(n)}deleteClicked(e){this.cardCollection.cardCollectionObservable=this.cardCollection.deleteCard(e),this.drawList()}clearCardListDiv(){document.getElementById("output").innerHTML=""}};Ie.drawList(),document.getElementsByClassName("forceLoadDbmsButton")[0].onclick=()=>{Ie.cardCollection.loadDbmsCard(),Ie.drawList()},document.getElementsByClassName("sortCards")[0].onclick=()=>{alert("Not implemented for now")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jYXVnaHRTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc09yQXJnQXJyYXkuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbWFwT25lT3JNYW55QXJncy5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlT2JqZWN0LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21BcnJheS5qcyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXAuanMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL3NyYy9tb2RlbHMvY2FyZENvbGxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vMDEtdG9vbGluZy8uL3NyYy9VSS9jYXJkQ29sbGVjdGlvblVJLnRzIiwid2VicGFjazovLzAxLXRvb2xpbmcvLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8wMS10b29saW5nLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvemlwLmpzIl0sIm5hbWVzIjpbImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJkb25lIiwidmFsdWUiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZSIsInN0ZXAiLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsImkiLCJfX3JlYWQiLCJyIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJpbCIsImoiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwiYXBwbHkiLCJxIiwiUHJvbWlzZSIsImEiLCJyZXN1bWUiLCJyZXNvbHZlIiwidGhlbiIsImZ1bGZpbGwiLCJyZWplY3QiLCJzZXR0bGUiLCJzaGlmdCIsImlzRnVuY3Rpb24iLCJjdG9yRnVuYyIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJlcnJvcnMiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX3RlYXJkb3ducyIsInVuc3Vic2NyaWJlIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsImlzQXJyYXkiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInJlbW92ZSIsImVfMV8xIiwicmV0dXJuIiwiX3RlYXJkb3duc18xIiwiX3RlYXJkb3duc18xXzEiLCJ0ZWFyZG93bl8xIiwiZXhlY1RlYXJkb3duIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJlbXB0eSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwidW5kZWZpbmVkIiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImRlbGVnYXRlIiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJub29wIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwia2luZCIsIlN1YnNjcmliZXIiLCJfc3VwZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiYmluZCIsIndyYXBGb3JFcnJvckhhbmRsaW5nIiwiZGVmYXVsdEVycm9ySGFuZGxlciIsImhhbmRsZXIiLCJfc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nIiwiX19zeW5jRXJyb3IiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwieCIsInBpcGVGcm9tQXJyYXkiLCJmbnMiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl9kZXByZWNhdGVkU3luY0Vycm9yU3Vic2NyaWJlIiwiX3RyeVN1YnNjcmliZSIsImxvY2FsU3Vic2NyaWJlciIsImRlc3QiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJzdWJzY3JpcHRpb24iLCJwaXBlIiwib3BlcmF0aW9ucyIsInRvUHJvbWlzZSIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlciIsInNjaGVkdWxlIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic3ViIiwicmVzdWx0IiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzSXRlcmFibGUiLCJpc0FzeW5jSXRlcmFibGUiLCJvYmoiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVQcm9taXNlIiwiZXhlY3V0ZSIsImRlbGF5IiwiY2F1Z2h0U2NoZWR1bGUiLCJzY2hlZHVsZUl0ZXJhYmxlIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UiLCJzY2hlZHVsZWQiLCJpbm5lckZyb20iLCJvYnMiLCJmcm9tQXJyYXlMaWtlIiwicHJvbWlzZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXJyYXkiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJQIiwiX19hc3luY1ZhbHVlcyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHJvY2VzcyIsImNhdGNoIiwiYXJnc09yQXJnQXJyYXkiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJsYXN0IiwicG9wUmVzdWx0U2VsZWN0b3IiLCJwb3BTY2hlZHVsZXIiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvIiwiZ2V0S2V5cyIsImtleXMiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsImZpcnN0XzEiLCJrZXkiLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJwcm9qZWN0IiwibWFwT25lT3JNYW55QXJncyIsImNhbGxPckFwcGx5IiwiY3JlYXRlT2JqZWN0IiwidmFsdWVzIiwiY29tYmluZUxhdGVzdEluaXQiLCJvYnNlcnZhYmxlcyIsInZhbHVlVHJhbnNmb3JtIiwibWF5YmVTY2hlZHVsZSIsImFjdGl2ZSIsInJlbWFpbmluZ0ZpcnN0VmFsdWVzIiwiX2xvb3BfMSIsImhhc0ZpcnN0VmFsdWUiLCJzbGljZSIsIm1lcmdlTWFwIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbFRlYXJkb3duIiwiYnVmZmVyIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0Iiwic3dpdGNoTWFwIiwiaW5uZXJTdWJzY3JpYmVyIiwiaW5uZXJJbmRleCIsIm91dGVySW5kZXgiLCJjYXJkQ29sbGVjdGlvbkNvbnRyb2xsZXIiLCJsb2FkRGJtc0NhcmQiLCJjYXJkQ29sbGVjdGlvbk9ic2VydmFibGUiLCJnZXRBbGxDYXJkc09ic2VydmFibGVGcm9tSnNvblNlcnZlciIsInNlYXJjaGVkIiwidHlwZSIsInRvTG93ZXJDYXNlIiwiZmV0Y2hBcGkiLCJmZXRjaCIsIkFQSV9VUkwiLCJyZXNwb25zZSIsIm9rIiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJkZWxldGVDYXJkIiwiY2FyZCIsIm9ic0NhcmQiLCJmaWx0ZXIiLCJzaW5nbGVPYnNjYXJkIiwiY2hlY2tDYXJkQXR0cmlidXRlRm9yU2VhcmNoIiwiY2F0ZWdvcnkiLCJhdHRhY2siLCJkZWZmZW5zZSIsInRpdGxlIiwic3RhcnMiLCJzZWFyY2giLCJzZWFyY2hlZFZhbHVlIiwiY2FyZHMiLCJzb3J0IiwicmFuZG9tT3JkZXJTb3J0ZXIiLCJyYW5kb21PcmRlclByb21pc2VHZW5lcmF0b3IiLCJyYW5kb21FbGVtZW50T3JkZXIiLCJjb3VudCIsImV4aXN0cyIsInJhbmRvbSIsIk1hdGgiLCJyb3VuZCIsImVsIiwiaW5lZHgiLCJ0ZW1wQ2FyZHMiLCJjb21ib0JveCIsInNldEludGVydmFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2FyZENvbGxlY3Rpb24iLCJ0ZXN0Q2FyZHMiLCJkcmF3TGlzdCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiYWRkSXRlbSIsInRlc3RTb3J0IiwidGVzdFNvcnRCdXR0b24iLCJzb3VyY2VzIiwiYnVmZmVycyIsImNvbXBsZXRlZCIsInNvdXJjZUluZGV4IiwiZXZlcnkiLCJzb21lIiwiemlwIiwibmV3Q2FyZHMiLCJjb21iaW5lTGF0ZXN0IiwibWFpbkNhcmREaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjYXJkRGl2IiwiaWQiLCJjYXJkSU1HIiwic3JjIiwiaW1nUGF0aCIsImNhcmRJbmZvRGl2IiwibGFiZWxOYW1lIiwibGFiZWxMdmwiLCJsYWJlbERlc2MiLCJhdHRyaWJ1dGUiLCJsYWJlbEF0dGFja0RlZmZlbnMiLCJjYXJkQnV0dG9uRGl2IiwiY2FyZERlbGV0ZUJ1dHRvbiIsIm9uY2xpY2siLCJkaXZDbGlja2VkIiwiZGVsZXRlQ2xpY2tlZCIsImNhcmREZXRhaWxEaXYiLCJjYXJkRGV0YWlsSW1hZ2UiLCJjbGVhckNhcmRMaXN0RGl2IiwiYWxlcnQiXSwibWFwcGluZ3MiOiI7bUJBZ0JBLElBQUlBLEVBQWdCLFNBQVNDLEVBQUdDLEdBSTVCLE9BSEFGLEVBQWdCRyxPQUFPQyxnQkFDbEIsQ0FBRUMsVUFBVyxjQUFnQkMsT0FBUyxTQUFVTCxFQUFHQyxHQUFLRCxFQUFFSSxVQUFZSCxJQUN2RSxTQUFVRCxFQUFHQyxHQUFLLElBQUssSUFBSUssS0FBS0wsRUFBT0MsT0FBT0ssVUFBVUMsZUFBZUMsS0FBS1IsRUFBR0ssS0FBSU4sRUFBRU0sR0FBS0wsRUFBRUssTUFDM0VOLEVBQUdDLElBR3JCLFNBQVNTLEVBQVVWLEVBQUdDLEdBQ3pCLEdBQWlCLG1CQUFOQSxHQUEwQixPQUFOQSxFQUMzQixNQUFNLElBQUlVLFVBQVUsdUJBQXlCQyxPQUFPWCxHQUFLLGlDQUU3RCxTQUFTWSxJQUFPQyxLQUFLQyxZQUFjZixFQURuQ0QsRUFBY0MsRUFBR0MsR0FFakJELEVBQUVPLFVBQWtCLE9BQU5OLEVBQWFDLE9BQU9jLE9BQU9mLElBQU1ZLEVBQUdOLFVBQVlOLEVBQUVNLFVBQVcsSUFBSU0sR0FtRDVFLFNBQVNJLEVBQVlDLEVBQVNDLEdBQ2pDLElBQXNHQyxFQUFHQyxFQUFHQyxFQUFHQyxFQUEzR0MsRUFBSSxDQUFFQyxNQUFPLEVBQUdDLEtBQU0sV0FBYSxHQUFXLEVBQVBKLEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxJQUFPSyxLQUFNLEdBQUlDLElBQUssSUFDaEcsT0FBT0wsRUFBSSxDQUFFTSxLQUFN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KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGVhcmRvd25zID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxUZWFyZG93biA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbFRlYXJkb3duKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxUZWFyZG93bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICAgICAgaWYgKF90ZWFyZG93bnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZWFyZG93bnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90ZWFyZG93bnNfMSA9IF9fdmFsdWVzKF90ZWFyZG93bnMpLCBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCk7ICFfdGVhcmRvd25zXzFfMS5kb25lOyBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZWFyZG93bl8xID0gX3RlYXJkb3duc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RlYXJkb3duc18xXzEgJiYgIV90ZWFyZG93bnNfMV8xLmRvbmUgJiYgKF9iID0gX3RlYXJkb3duc18xLnJldHVybikpIF9iLmNhbGwoX3RlYXJkb3duc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjVGVhcmRvd24odGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl90ZWFyZG93bnMgPSAoX2EgPSB0aGlzLl90ZWFyZG93bnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX3RlYXJkb3ducyA9IHRoaXMuX3RlYXJkb3ducztcbiAgICAgICAgX3RlYXJkb3ducyAmJiBhcnJSZW1vdmUoX3RlYXJkb3ducywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY1RlYXJkb3duKHRlYXJkb3duKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGVhcmRvd24pKSB7XG4gICAgICAgIHRlYXJkb3duKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0ZWFyZG93bi51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkgfHwgc2V0VGltZW91dCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcywgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIChuZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dCwgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvciwgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSk7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA9PT0gbnVsbCB8fCBuZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuZXh0LmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgICAgIGVycm9yID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gY29tcGxldGUgPT09IG51bGwgfHwgY29tcGxldGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBsZXRlLmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IHtcbiAgICAgICAgICAgIG5leHQ6IG5leHQgPyB3cmFwRm9yRXJyb3JIYW5kbGluZyhuZXh0LCBfdGhpcykgOiBub29wLFxuICAgICAgICAgICAgZXJyb3I6IHdyYXBGb3JFcnJvckhhbmRsaW5nKGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IGRlZmF1bHRFcnJvckhhbmRsZXIsIF90aGlzKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSA/IHdyYXBGb3JFcnJvckhhbmRsaW5nKGNvbXBsZXRlLCBfdGhpcykgOiBub29wLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIHdyYXBGb3JFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGFuZGxlci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLl9fc3luY0Vycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlcHJlY2F0ZWRTeW5jRXJyb3JTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fZGVwcmVjYXRlZFN5bmNFcnJvclN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsb2NhbFN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgICAgICBsb2NhbFN1YnNjcmliZXIuX3N5bmNFcnJvckhhY2tfaXNTdWJzY3JpYmluZyA9IHRydWU7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZCh0aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvY2FsU3Vic2NyaWJlci5fX3N5bmNFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVzdCA9IGxvY2FsU3Vic2NyaWJlcjtcbiAgICAgICAgd2hpbGUgKGRlc3QpIHtcbiAgICAgICAgICAgIGlmICgnX19zeW5jRXJyb3InIGluIGRlc3QpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBkZXN0Ll9fc3luY0Vycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3QgPSBkZXN0LmRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxvY2FsU3Vic2NyaWJlci5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCBzdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbnMubGVuZ3RoID8gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKSA6IHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tSXRlcmFibGUoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVyYWJsZV8xID0gX192YWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKTsgIWl0ZXJhYmxlXzFfMS5kb25lOyBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmFibGVfMV8xICYmICFpdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBpdGVyYWJsZV8xLnJldHVybikpIF9hLmNhbGwoaXRlcmFibGVfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZU9ic2VydmFibGUgfSBmcm9tICcuL3NjaGVkdWxlT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVByb21pc2UgfSBmcm9tICcuL3NjaGVkdWxlUHJvbWlzZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi9zY2hlZHVsZUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlSXRlcmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZWQuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgICAgIHN1Yi5hZGQob2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7IH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7IH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KSk7IH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBjYXVnaHRTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvY2F1Z2h0U2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXRlcmF0b3I7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGNhdWdodFNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY2F1Z2h0U2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBleGVjdXRlLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHZhciBzdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBzdWJzY3JpYmVyLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXVnaHRTY2hlZHVsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJ2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgZnVuY3Rpb24gYXJnc09yQXJnQXJyYXkoYXJncykge1xuICAgIHJldHVybiBhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KGFyZ3NbMF0pID8gYXJnc1swXSA6IGFyZ3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzT3JBcmdBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjbG9zZWQgPSB0aGlzLmNsb3NlZDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAhY2xvc2VkICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsInZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5leHBvcnQgZnVuY3Rpb24gYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgZmlyc3RfMSA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChpc0FycmF5KGZpcnN0XzEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhcmdzOiBmaXJzdF8xLCBrZXlzOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUE9KTyhmaXJzdF8xKSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRLZXlzKGZpcnN0XzEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLFxuICAgICAgICAgICAgICAgIGtleXM6IGtleXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGFyZ3M6IGFyZ3MsIGtleXM6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGlzUE9KTyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGdldFByb3RvdHlwZU9mKG9iaikgPT09IG9iamVjdFByb3RvO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc0FyZ0FycmF5T3JPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KGtleXMsIHZhbHVlcykge1xuICAgIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXksIGkpIHsgcmV0dXJuICgocmVzdWx0W2tleV0gPSB2YWx1ZXNbaV0pLCByZXN1bHQpOyB9LCB7fSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNGaXJzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRmlyc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRmlyc3RWYWx1ZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nRmlyc3RWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWVUcmFuc2Zvcm0odmFsdWVzLnNsaWNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBzdWJzY3JpYmVyKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGV4ZWN1dGUsIHN1YnNjcmlwdGlvbikge1xuICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZXhlY3V0ZSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsVGVhcmRvd24pIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWJTY2hlZHVsZXIgPyBzdWJzY3JpYmVyLmFkZChpbm5lclN1YlNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KSkgOiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbFRlYXJkb3duID09PSBudWxsIHx8IGFkZGl0aW9uYWxUZWFyZG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbFRlYXJkb3duKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XG5pbXBvcnQgeyBpbnRlcm5hbEZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcbnZhciBldmVudFRhcmdldE1ldGhvZHMgPSBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lciddO1xudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgdmFyIF9hID0gX19yZWFkKGlzRXZlbnRUYXJnZXQodGFyZ2V0KVxuICAgICAgICA/IGV2ZW50VGFyZ2V0TWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTsgfSlcbiAgICAgICAgOlxuICAgICAgICAgICAgaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICA6IGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IGpxdWVyeU1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgOiBbXSwgMiksIGFkZCA9IF9hWzBdLCByZW1vdmUgPSBfYVsxXTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2UodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGludGVybmFsRnJvbUFycmF5KHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYWRkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoMSA8IGFyZ3MubGVuZ3RoID8gYXJncyA6IGFyZ3NbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBhZGQoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoaGFuZGxlcik7IH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbih0YXJnZXQub2ZmKTtcbn1cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBmcm9tQXJyYXlMaWtlIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbEZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikgOiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuY29uc3QgQVBJX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL1wiO1xyXG5leHBvcnQgY2xhc3MgY2FyZENvbGxlY3Rpb25Db250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubG9hZERibXNDYXJkKCk7XHJcbiAgICB9XHJcbiAgICBsb2FkRGJtc0NhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5jYXJkQ29sbGVjdGlvbk9ic2VydmFibGUgPSB0aGlzLmdldEFsbENhcmRzT2JzZXJ2YWJsZUZyb21Kc29uU2VydmVyKFwiXCIsIFwiXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0QWxsQ2FyZHNPYnNlcnZhYmxlRnJvbUpzb25TZXJ2ZXIoc2VhcmNoZWQsIHR5cGUpIHtcclxuICAgICAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChzZWFyY2hlZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICB2YXIgZmV0Y2hBcGkgPSBmZXRjaChBUElfVVJMICsgXCJjYXJkc1wiKTtcclxuICAgICAgICB9IC8vP3RpdGxlPUNlbHRpYyUyMEd1YXJkaWFuXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmZXRjaEFwaSA9IGZldGNoKEFQSV9VUkwgKyBcImNhcmRzXCIgKyBgPyR7dHlwZX09YCArIHNlYXJjaGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGZldGNoVmFyID0gZmV0Y2hBcGlcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhcmRzIG5vdCBmb3VuZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coYEVycm9yIGAsIGVycikpO1xyXG4gICAgICAgIHJldHVybiBmcm9tKGZldGNoVmFyKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZUNhcmQoY2FyZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRDb2xsZWN0aW9uT2JzZXJ2YWJsZS5waXBlKG1hcCgob2JzQ2FyZCkgPT4gb2JzQ2FyZC5maWx0ZXIoKHNpbmdsZU9ic2NhcmQpID0+IHNpbmdsZU9ic2NhcmQgIT09IGNhcmQpKSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NhcmRBdHRyaWJ1dGVGb3JTZWFyY2goY2FyZCwgY2F0ZWdvcnkpIHtcclxuICAgICAgICBjYXRlZ29yeSA9IGNhdGVnb3J5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBcImF0dGFja1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJkLmF0dGFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2F0ZWdvcnkgPT09IFwiZGVmZmVuc2VcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FyZC5kZWZmZW5zZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2F0ZWdvcnkgPT09IFwidGl0bGVcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FyZC50aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJkLnN0YXJzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlYXJjaChzZWFyY2hlZFZhbHVlLCBjYXRlZ29yeSkge1xyXG4gICAgICAgIGlmIChzZWFyY2hlZFZhbHVlICE9PSBcIlwiKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmNhcmRDb2xsZWN0aW9uT2JzZXJ2YWJsZS5waXBlKG1hcChjYXJkcyA9PiBjYXJkcy5maWx0ZXIoY2FyZCA9PiB0aGlzLmNoZWNrQ2FyZEF0dHJpYnV0ZUZvclNlYXJjaChjYXJkLCBjYXRlZ29yeSkgPT0gc2VhcmNoZWRWYWx1ZSkpKSk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhcmRDb2xsZWN0aW9uT2JzZXJ2YWJsZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzb3J0KCkge1xyXG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuY2FyZENvbGxlY3Rpb25PYnNlcnZhYmxlLnBpcGUobWFwKGNhcmRzID0+IHRoaXMucmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpKSkpO1xyXG4gICAgfVxyXG4gICAgcmFuZG9tT3JkZXJQcm9taXNlR2VuZXJhdG9yKGxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByYW5kb21FbGVtZW50T3JkZXIgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgbGV0IHRlbXAgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCByYW5kb20gPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoY291bnQgIT09IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZXhpc3RzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByYW5kb20gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBsZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tRWxlbWVudE9yZGVyLnB1c2gocmFuZG9tKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tRWxlbWVudE9yZGVyLmZvckVhY2goKGVsLCBpbmVkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tID09PSBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbUVsZW1lbnRPcmRlci5wdXNoKHJhbmRvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmFuZG9tRWxlbWVudE9yZGVyKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShyYW5kb21FbGVtZW50T3JkZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpIHtcclxuICAgICAgICBsZXQgYXJyYXkgPSBhd2FpdCB0aGlzLnJhbmRvbU9yZGVyUHJvbWlzZUdlbmVyYXRvcihjYXJkcy5sZW5ndGggLSAxKTtcclxuICAgICAgICBsZXQgdGVtcENhcmRzID0gW107XHJcbiAgICAgICAgYXJyYXkuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHRlbXBDYXJkcy5wdXNoKGNhcmRzW2VsXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBDYXJkcztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21ib0JveFZhbHVlKCkge1xyXG4gICAgdmFyIGNvbWJvQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNvbWJvQm94SW5wdXRcIik7XHJcbiAgICByZXR1cm4gY29tYm9Cb3hbMF0udmFsdWU7XHJcbn1cclxuZnVuY3Rpb24ga2V5Ym9hcmRWYWx1ZSgpIHtcclxuICAgIHZhciBpbnB1dEJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzZWFyY2hJbnB1dFwiKTtcclxuICAgIHJldHVybiBpbnB1dEJveFswXS52YWx1ZTtcclxufVxyXG5jb25zdCBjb21ib0JveE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgoY29tYm9Cb3gpID0+IHtcclxuICAgIHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBjb21ib0JveC5uZXh0KGNvbWJvQm94VmFsdWUoKSk7XHJcbiAgICB9LCAxMDAwKTtcclxufSk7XHJcbmNvbnN0IGtleWJvYXJkSW5wdU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgoaW5wdXQpID0+IHtcclxuICAgIHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpbnB1dC5uZXh0KGtleWJvYXJkVmFsdWUoKSk7XHJcbiAgICB9LCAxMDAwKTtcclxufSk7XHJcbiIsImltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIGZyb21FdmVudCwgT2JzZXJ2YWJsZSwgemlwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IGNhcmRDb2xsZWN0aW9uQ29udHJvbGxlciB9IGZyb20gXCIuLi9tb2RlbHMvY2FyZENvbGxlY3Rpb25cIjtcclxuZXhwb3J0IGNsYXNzIGNhcmRDb2xsZWN0aW9uVUkge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50ZXN0Q2FyZHMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhcmRDb2xsZWN0aW9uID0gbmV3IGNhcmRDb2xsZWN0aW9uQ29udHJvbGxlcigpO1xyXG4gICAgfVxyXG4gICAgZHJhd0xpc3QoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkRGV0YWlsXCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRcIikuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICB0aGlzLmNhcmRDb2xsZWN0aW9uLmNhcmRDb2xsZWN0aW9uT2JzZXJ2YWJsZS5waXBlKHN3aXRjaE1hcCgoY2FyZHMpID0+IHRoaXMuc2VhcmNoKCkpKS5zdWJzY3JpYmUoKGNhcmRzKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIC8vVGVzdCB6YSByYW5kb20gc29ydGlyYW5qZSBuaXNhbSBwcm92YWxpbyBrYWtvIGZ1bmtjaW9uaXNlXHJcbiAgICAgICAgICAgIC8vIGNhcmRzLnRoZW4oKGNhcmRzMSkgPT57XHJcbiAgICAgICAgICAgIC8vICAgaWYgKGNhcmRzMVswXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBpZiAoY2FyZHMxWzBdLnRpdGxlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgIGNsZWFyQ2FyZERpdigpO1xyXG4gICAgICAgICAgICAvLyAgICAgICBjYXJkczEuZm9yRWFjaCgoZWw6IENhcmQpID0+IHtcclxuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLmFkZEl0ZW0oZWwpO1xyXG4gICAgICAgICAgICAvLyAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gICAgICAgLy8gdGhpcy5yYW5kb21PcmRlclNvcnRlcihjYXJkcyk7XHJcbiAgICAgICAgICAgIC8vICAgICAgIC8vIGNvbnNvbGUubG9nKGNhcmRzKVxyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgLy8gfSlcclxuICAgICAgICAgICAgaWYgKGNhcmRzWzBdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjYXJkc1swXS50aXRsZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyQ2FyZERpdigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkSXRlbShlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRlc3RTb3J0KGNhcmRzKSB7XHJcbiAgICAgICAgdGhpcy50ZXN0U29ydEJ1dHRvbihjYXJkcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FyZENvbGxlY3Rpb24ucmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpOyAvL3RoaXMuY2FyZENvbGxlY3Rpb24ucmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpXHJcbiAgICB9XHJcbiAgICB0ZXN0U29ydEJ1dHRvbihjYXJkcykge1xyXG4gICAgICAgIHppcChzb3J0QnV0dG9uKCksIHRoaXMuY2FyZENvbGxlY3Rpb24ucmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpKS5waXBlKHN3aXRjaE1hcCgobmV3Q2FyZHMpID0+IHRoaXMuY2FyZENvbGxlY3Rpb24ucmFuZG9tT3JkZXJTb3J0ZXIoY2FyZHMpKSkuc3Vic2NyaWJlKChuZXdDYXJkcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRlc3RDYXJkcyA9IG5ld0NhcmRzO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnRlc3RDYXJkcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVzdENhcmRzO1xyXG4gICAgfVxyXG4gICAgc2VhcmNoKCkge1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFtjb21ib0JveE9ic2VydmFibGUsIGtleWJvYXJkSW5wdU9ic2VydmFibGVdKVxyXG4gICAgICAgICAgICAucGlwZShzd2l0Y2hNYXAoKGNhcmQpID0+IHRoaXMuY2FyZENvbGxlY3Rpb24uc2VhcmNoKGNhcmRbMV0sIGNhcmRbMF0pKSk7XHJcbiAgICB9XHJcbiAgICBhZGRJdGVtKGNhcmQpIHtcclxuICAgICAgICBsZXQgbWFpbkNhcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIG1haW5DYXJkRGl2LmNsYXNzTmFtZSA9IFwibWFpblNpbmdsZUNhcmREaXZcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dHB1dFwiKS5hcHBlbmRDaGlsZChtYWluQ2FyZERpdik7XHJcbiAgICAgICAgbGV0IGNhcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGNhcmREaXYuY2xhc3NOYW1lID0gXCJjYXJkVWlTdHlsZVwiO1xyXG4gICAgICAgIGNhcmREaXYuaWQgPSBcInRlc3RcIjtcclxuICAgICAgICBtYWluQ2FyZERpdi5hcHBlbmRDaGlsZChjYXJkRGl2KTtcclxuICAgICAgICBsZXQgY2FyZElNRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgY2FyZElNRy5zcmMgPSBjYXJkLmltZ1BhdGg7XHJcbiAgICAgICAgY2FyZElNRy5jbGFzc05hbWUgPSBcImNhcmRVaUltZ1wiO1xyXG4gICAgICAgIGNhcmREaXYuYXBwZW5kQ2hpbGQoY2FyZElNRyk7XHJcbiAgICAgICAgbGV0IGNhcmRJbmZvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBjYXJkSW5mb0Rpdi5jbGFzc05hbWUgPSBcImNhcmRJbmZvRGl2XCI7XHJcbiAgICAgICAgY2FyZERpdi5hcHBlbmRDaGlsZChjYXJkSW5mb0Rpdik7XHJcbiAgICAgICAgbGV0IGxhYmVsTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgICAgICBsYWJlbE5hbWUuaW5uZXJIVE1MID0gXCJOYW1lOiBcIiArIGNhcmQudGl0bGU7XHJcbiAgICAgICAgY2FyZEluZm9EaXYuYXBwZW5kQ2hpbGQobGFiZWxOYW1lKTtcclxuICAgICAgICBsZXQgbGFiZWxMdmwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWxMdmwuaW5uZXJIVE1MID0gXCJMZXZlbDogXCIgKyBjYXJkLnN0YXJzO1xyXG4gICAgICAgIGNhcmRJbmZvRGl2LmFwcGVuZENoaWxkKGxhYmVsTHZsKTtcclxuICAgICAgICBsZXQgbGFiZWxEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgICAgIGxhYmVsRGVzYy5pbm5lckhUTUwgPSBcIkF0dHJpYnV0ZTogXCIgKyBjYXJkLmF0dHJpYnV0ZTtcclxuICAgICAgICBjYXJkSW5mb0Rpdi5hcHBlbmRDaGlsZChsYWJlbERlc2MpO1xyXG4gICAgICAgIGxldCBsYWJlbEF0dGFja0RlZmZlbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWxBdHRhY2tEZWZmZW5zLmlubmVySFRNTCA9IGBBVEs6ICR7Y2FyZC5hdHRhY2t9IERFRjogJHtjYXJkLmRlZmZlbnNlfWA7XHJcbiAgICAgICAgY2FyZEluZm9EaXYuYXBwZW5kQ2hpbGQobGFiZWxBdHRhY2tEZWZmZW5zKTtcclxuICAgICAgICBsZXQgY2FyZEJ1dHRvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgY2FyZERpdi5hcHBlbmRDaGlsZChjYXJkQnV0dG9uRGl2KTtcclxuICAgICAgICBsZXQgY2FyZERlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgY2FyZERlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSBcImNhcmREZWxldGVCdXR0b25cIjtcclxuICAgICAgICBjYXJkRGVsZXRlQnV0dG9uLmlubmVySFRNTCA9IFwiREVMRVRFXCI7XHJcbiAgICAgICAgbWFpbkNhcmREaXYuYXBwZW5kQ2hpbGQoY2FyZERlbGV0ZUJ1dHRvbik7XHJcbiAgICAgICAgY2FyZERpdi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpdkNsaWNrZWQoY2FyZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjYXJkRGVsZXRlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlQ2xpY2tlZChjYXJkKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZGl2Q2xpY2tlZChjYXJkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coY2FyZC50aXRsZSArIFwiIGNsaWNrZWRcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkRGV0YWlsXCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGNhcmREZXRhaWxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGNhcmREZXRhaWxEaXYuY2xhc3NOYW1lID0gXCJjYXJkRGV0YWlsRGl2XCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkRGV0YWlsXCIpLmFwcGVuZENoaWxkKGNhcmREZXRhaWxEaXYpO1xyXG4gICAgICAgIGxldCBjYXJkRGV0YWlsSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgIGNhcmREZXRhaWxJbWFnZS5zcmMgPSBjYXJkLmltZ1BhdGg7XHJcbiAgICAgICAgY2FyZERldGFpbERpdi5hcHBlbmRDaGlsZChjYXJkRGV0YWlsSW1hZ2UpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlQ2xpY2tlZChjYXJkKSB7XHJcbiAgICAgICAgdGhpcy5jYXJkQ29sbGVjdGlvbi5jYXJkQ29sbGVjdGlvbk9ic2VydmFibGUgPVxyXG4gICAgICAgICAgICB0aGlzLmNhcmRDb2xsZWN0aW9uLmRlbGV0ZUNhcmQoY2FyZCk7XHJcbiAgICAgICAgdGhpcy5kcmF3TGlzdCgpO1xyXG4gICAgfVxyXG4gICAgY2xlYXJDYXJkTGlzdERpdigpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dHB1dFwiKS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNsZWFyQ2FyZERpdigpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbn1cclxuZnVuY3Rpb24gY29tYm9Cb3hWYWx1ZSgpIHtcclxuICAgIHZhciBjb21ib0JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjb21ib0JveElucHV0XCIpO1xyXG4gICAgcmV0dXJuIGNvbWJvQm94WzBdLnZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIHNvcnRCdXR0b24oKSB7XHJcbiAgICB2YXIgc29ydEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzb3J0Q2FyZHNcIilbMF07XHJcbiAgICByZXR1cm4gZnJvbUV2ZW50KHNvcnRCdXR0b24sICdjbGljaycpO1xyXG59XHJcbmZ1bmN0aW9uIGtleWJvYXJkVmFsdWUoKSB7XHJcbiAgICB2YXIgaW5wdXRCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2VhcmNoSW5wdXRcIik7XHJcbiAgICByZXR1cm4gaW5wdXRCb3hbMF0udmFsdWU7XHJcbn1cclxuY29uc3QgY29tYm9Cb3hPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKGNvbWJvQm94KSA9PiB7XHJcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgY29tYm9Cb3gubmV4dChjb21ib0JveFZhbHVlKCkpO1xyXG4gICAgfSwgMTAwMCk7XHJcbn0pO1xyXG5jb25zdCBrZXlib2FyZElucHVPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKGlucHV0KSA9PiB7XHJcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgaW5wdXQubmV4dChrZXlib2FyZFZhbHVlKCkpO1xyXG4gICAgfSwgMTAwMCk7XHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNhcmRDb2xsZWN0aW9uVUkgfSBmcm9tIFwiLi9VSS9jYXJkQ29sbGVjdGlvblVJXCI7XHJcbmZ1bmN0aW9uIGNvbWJvQm94VmFsdWUoKSB7XHJcbiAgICB2YXIgY29tYm9Cb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY29tYm9Cb3hJbnB1dFwiKTtcclxuICAgIHJldHVybiBjb21ib0JveFswXS52YWx1ZTtcclxufVxyXG5mdW5jdGlvbiBrZXlib2FyZFZhbHVlKCkge1xyXG4gICAgdmFyIGlucHV0Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNlYXJjaElucHV0XCIpO1xyXG4gICAgcmV0dXJuIGlucHV0Qm94WzBdLnZhbHVlO1xyXG59XHJcbmNvbnN0IGNvbWJvQm94T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChjb21ib0JveCkgPT4ge1xyXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIGNvbWJvQm94Lm5leHQoY29tYm9Cb3hWYWx1ZSgpKTtcclxuICAgIH0sIDEwMDApO1xyXG59KTtcclxuY29uc3Qga2V5Ym9hcmRJbnB1T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChpbnB1dCkgPT4ge1xyXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIGlucHV0Lm5leHQoa2V5Ym9hcmRWYWx1ZSgpKTtcclxuICAgIH0sIDEwMDApO1xyXG59KTtcclxuY29uc3QgY2FyZENvbGxlY3Rpb24gPSBuZXcgY2FyZENvbGxlY3Rpb25VSSgpO1xyXG5jYXJkQ29sbGVjdGlvbi5kcmF3TGlzdCgpO1xyXG4vLyBjYXJkQ29sbGVjdGlvbi5zZWFyY2goY29tYm9Cb3hPYnNlcnZhYmxlLCBrZXlib2FyZElucHVPYnNlcnZhYmxlKTtcclxuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZvcmNlTG9hZERibXNCdXR0b25cIilbMF0ub25jbGljayA9ICgpID0+IHtcclxuICAgIGNhcmRDb2xsZWN0aW9uLmNhcmRDb2xsZWN0aW9uLmxvYWREYm1zQ2FyZCgpO1xyXG4gICAgY2FyZENvbGxlY3Rpb24uZHJhd0xpc3QoKTtcclxufTtcclxuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNvcnRDYXJkc1wiKVswXS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgYWxlcnQoXCJOb3QgaW1wbGVtZW50ZWQgZm9yIG5vd1wiKTtcclxufTtcclxuLy8gZnVuY3Rpb24gYWRkSXRlbShjYXJkOiBDYXJkKSB7XHJcbi8vICAgbGV0IGNhcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4vLyAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmFwcGVuZENoaWxkKGNhcmREaXYpO1xyXG4vLyAgIGNhcmREaXYuY2xhc3NOYW1lID0gXCJjYXJkVWlTdHlsZVwiO1xyXG4vLyAgIGNhcmREaXYuaWQgPSBcInRlc3RcIjtcclxuLy8gICBsZXQgY2FyZElNRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbi8vICAgY2FyZElNRy5zcmMgPSBjYXJkLmltZ1BhdGg7XHJcbi8vICAgY2FyZElNRy5jbGFzc05hbWUgPSBcImNhcmRVaUltZ1wiO1xyXG4vLyAgIGNhcmREaXYuYXBwZW5kQ2hpbGQoY2FyZElNRyk7XHJcbi8vICAgbGV0IGNhcmRJbmZvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuLy8gICBjYXJkSW5mb0Rpdi5jbGFzc05hbWUgPSBcImNhcmRJbmZvRGl2XCI7XHJcbi8vICAgY2FyZERpdi5hcHBlbmRDaGlsZChjYXJkSW5mb0Rpdik7XHJcbi8vICAgbGV0IGxhYmVsTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuLy8gICBsYWJlbE5hbWUuaW5uZXJIVE1MID0gXCJOYW1lOiBcIiArIGNhcmQudGl0bGU7XHJcbi8vICAgY2FyZEluZm9EaXYuYXBwZW5kQ2hpbGQobGFiZWxOYW1lKTtcclxuLy8gICBsZXQgbGFiZWxMdmwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbi8vICAgbGFiZWxMdmwuaW5uZXJIVE1MID0gXCJMZXZlbDogXCIgKyBjYXJkLnN0YXJzO1xyXG4vLyAgIGNhcmRJbmZvRGl2LmFwcGVuZENoaWxkKGxhYmVsTHZsKTtcclxuLy8gICBsZXQgbGFiZWxEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4vLyAgIGxhYmVsRGVzYy5pbm5lckhUTUwgPSBcIkF0dHJpYnV0ZTogXCIgKyBjYXJkLmF0dHJpYnV0ZTtcclxuLy8gICBjYXJkSW5mb0Rpdi5hcHBlbmRDaGlsZChsYWJlbERlc2MpO1xyXG4vLyAgIGxldCBsYWJlbEF0dGFja0RlZmZlbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbi8vICAgbGFiZWxBdHRhY2tEZWZmZW5zLmlubmVySFRNTCA9IGBBVEs6ICR7Y2FyZC5hdHRhY2t9IERFRjogJHtjYXJkLmRlZmZlbnNlfWA7XHJcbi8vICAgY2FyZEluZm9EaXYuYXBwZW5kQ2hpbGQobGFiZWxBdHRhY2tEZWZmZW5zKTtcclxuLy8gICBjYXJkRGl2Lm9uY2xpY2sgPSAoKSA9PiB7XHJcbi8vICAgICBkaXZDbGlja2VkKGNhcmQpO1xyXG4vLyAgIH1cclxuLy8gfVxyXG4vLyBmdW5jdGlvbiBkaXZDbGlja2VkKGNhcmQ6IENhcmQpXHJcbi8vIHtcclxuLy8gICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmREZXRhaWxcIikuaW5uZXJIVE1MID0gXCJcIjtcclxuLy8gICBsZXQgY2FyZERldGFpbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbi8vICAgY2FyZERldGFpbERpdi5jbGFzc05hbWUgPSBcImNhcmREZXRhaWxEaXZcIjtcclxuLy8gICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmREZXRhaWxcIikuYXBwZW5kQ2hpbGQoY2FyZERldGFpbERpdik7XHJcbi8vICAgbGV0IGNhcmREZXRhaWxJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIilcclxuLy8gICBjYXJkRGV0YWlsSW1hZ2Uuc3JjID0gY2FyZC5pbWdQYXRoO1xyXG4vLyAgIGNhcmREZXRhaWxEaXYuYXBwZW5kQ2hpbGQoY2FyZERldGFpbEltYWdlKTtcclxuLy8gfVxyXG4vLyBmdW5jdGlvbiBzaG93RGV0YWlsZWRDYXJkVmlldyhjYXJkOiBDYXJkKVxyXG4vLyB7XHJcbi8vICAgY29uc29sZS5sb2coY2FyZClcclxuLy8gICBsZXQgZGV0YWlsQ2FyZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbi8vICAgZGV0YWlsQ2FyZERpdi5zcmMgPSBjYXJkLmltZ1BhdGg7XHJcbi8vICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkRGV0YWlsXCIpLmFwcGVuZENoaWxkKGRldGFpbENhcmREaXYpO1xyXG4vLyB9XHJcbi8vIGZ1bmN0aW9uIGdldEFsbENhcmRzT2JzZXJ2YWJsZUZyb21Kc29uU2VydmVyKFxyXG4vLyAgIHNlYXJjaGVkOiBzdHJpbmcsXHJcbi8vICAgdHlwZTogc3RyaW5nXHJcbi8vICk6IE9ic2VydmFibGU8Q2FyZFtdPiB7XHJcbi8vICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcclxuLy8gICBpZiAoc2VhcmNoZWQgPT09IFwiXCIpIHtcclxuLy8gICAgIHZhciBmZXRjaEFwaSA9IGZldGNoKEFQSV9VUkwgKyBcImNhcmRzXCIpO1xyXG4vLyAgIH0gLy8/dGl0bGU9Q2VsdGljJTIwR3VhcmRpYW5cclxuLy8gICBlbHNlIHtcclxuLy8gICAgIHZhciBmZXRjaEFwaSA9IGZldGNoKEFQSV9VUkwgKyBcImNhcmRzXCIgKyBgPyR7dHlwZX09YCArIHNlYXJjaGVkKTtcclxuLy8gICB9XHJcbi8vICAgdmFyIGZldGNoVmFyID0gZmV0Y2hBcGlcclxuLy8gICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4vLyAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FyZHMgbm90IGZvdW5kXCIpO1xyXG4vLyAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH0pXHJcbi8vICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coYEVycm9yIGAsIGVycikpO1xyXG4vLyAgIHJldHVybiBmcm9tKGZldGNoVmFyKTtcclxuLy8gfVxyXG4vLyBjb25zdCBjYXJkR2V0U3Vic2NyaXB0aW9uID0gZ2V0QWxsQ2FyZHNPYnNlcnZhYmxlRnJvbUpzb25TZXJ2ZXIoXHJcbi8vICAgXCJcIixcclxuLy8gICBcIlwiXHJcbi8vICkuc3Vic2NyaWJlKCh4KSA9PiB7XHJcbi8vICAgeC5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcclxuLy8gICAgIGFkZEl0ZW0oZWwpO1xyXG4vLyAgIH0pO1xyXG4vLyB9KTtcclxuLy8gZnVuY3Rpb24gY2xlYXJDYXJkRGl2KCkge1xyXG4vLyAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbi8vIH1cclxuIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgYXJnc09yQXJnQXJyYXkgfSBmcm9tICcuLi91dGlsL2FyZ3NPckFyZ0FycmF5JztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IHBvcFJlc3VsdFNlbGVjdG9yIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmV4cG9ydCBmdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBzb3VyY2VzID0gYXJnc09yQXJnQXJyYXkoYXJncyk7XG4gICAgcmV0dXJuIHNvdXJjZXMubGVuZ3RoXG4gICAgICAgID8gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXJzID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0pO1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHNvdXJjZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9KTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzID0gY29tcGxldGVkID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc291cmNlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpbm5lckZyb20oc291cmNlc1tzb3VyY2VJbmRleF0pLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJzW3NvdXJjZUluZGV4XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuZXZlcnkoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLmxlbmd0aDsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBidWZmZXJzLm1hcChmdW5jdGlvbiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIuc2hpZnQoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChyZXN1bHQpKSkgOiByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuc29tZShmdW5jdGlvbiAoYnVmZmVyLCBpKSB7IHJldHVybiAhYnVmZmVyLmxlbmd0aCAmJiBjb21wbGV0ZWRbaV07IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRbc291cmNlSW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgIWJ1ZmZlcnNbc291cmNlSW5kZXhdLmxlbmd0aCAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHNvdXJjZUluZGV4ID0gMDsgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZUluZGV4IDwgc291cmNlcy5sZW5ndGg7IHNvdXJjZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKHNvdXJjZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycyA9IGNvbXBsZXRlZCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICA6IEVNUFRZO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=