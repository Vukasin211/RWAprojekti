/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),c=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)c.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return c}function i(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}function c(e){return this instanceof c?(this.v=e,this):new c(e)}function u(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof c?Promise.resolve(n.value.v).then(s,l):f(i[0][2],n)}catch(e){f(i[0][3],e)}var n}function s(e){a("next",e)}function l(e){a("throw",e)}function f(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function a(e){return"function"==typeof e}Object.create,Object.create;var s,l=((s=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,c,u;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var f=r(s),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else s.remove(this);var h=this.initialTeardown;if(a(h))try{h()}catch(e){u=e instanceof l?e.errors:[e]}var b=this._teardowns;if(b){this._teardowns=null;try{for(var v=r(b),y=v.next();!y.done;y=v.next()){var m=y.value;try{p(m)}catch(e){u=null!=u?u:[],e instanceof l?u=i(i([],o(u)),o(e.errors)):u.push(e)}}}catch(e){n={error:e}}finally{try{y&&!y.done&&(c=v.return)&&c.call(v)}finally{if(n)throw n.error}}}if(u)throw new l(u)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)p(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function h(e){return e instanceof d||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function p(e){a(e)?e():e.unsubscribe()}d.EMPTY;var b=null,v=null,y=void 0,m=!1,w=!1,g={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=g.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,i([],o(e)))},clearTimeout:function(e){var t=g.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function _(e){g.setTimeout((function(){if(!b)throw e;b(e)}))}function E(){}var x=S("C",void 0,void 0);function S(e,t,n){return{kind:e,value:t,error:n}}var C=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=A,n}return t(n,e),n.create=function(e,t,n){return new T(e,t,n)},n.prototype.next=function(e){this.isStopped?O(function(e){return S("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?O(S("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?O(x,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),T=function(e){function n(t,n,r){var o,i=e.call(this)||this;if(a(t))o=t;else if(t){var c;o=t.next,n=t.error,r=t.complete,i&&w?(c=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:c=t,o=null==o?void 0:o.bind(c),n=null==n?void 0:n.bind(c),r=null==r?void 0:r.bind(c)}return i.destination={next:o?k(o,i):E,error:k(null!=n?n:I,i),complete:r?k(r,i):E},i}return t(n,e),n}(C);function k(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{e.apply(void 0,i([],o(n)))}catch(e){if(m){if(!t._syncErrorHack_isSubscribing)throw e;t.__syncError=e}else _(e)}}}function I(e){throw e}function O(e,t){var n=v;n&&g.setTimeout((function(){return n(e,t)}))}var A={closed:!0,next:E,error:I,complete:E},P="function"==typeof Symbol&&Symbol.observable||"@@observable";function L(e){return e}function j(e){return 0===e.length?L:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var D=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=(r=e)&&r instanceof C||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&h(r)?e:new T(e,t,n);if(m)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,c=this.source;o.add(i?i.call(o,c):c?this._subscribe(o):this._trySubscribe(o))}return o},e.prototype._deprecatedSyncErrorSubscribe=function(e){var t=e;t._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)e.add(n.call(e,this.source));else try{e.add(this._subscribe(e))}catch(e){t.__syncError=e}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{e.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=B(t))((function(t,r){var o;o=n.subscribe((function(t){try{e(t)}catch(e){r(e),null==o||o.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[P]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?j(e)(this):this},e.prototype.toPromise=function(e){var t=this;return new(e=B(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function B(e){var t;return null!==(t=null!=e?e:y)&&void 0!==t?t:Promise}var H=Array.isArray,M=Object.getPrototypeOf,N=Object.prototype,F=Object.keys;function U(e){if(1===e.length){var t=e[0];if(H(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&M(r)===N){var n=F(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}var Y=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function R(e){return a(null==e?void 0:e.then)}var $="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(e,t){if(!e)throw new Error("Iterable cannot be null");return new D((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[Symbol.asyncIterator]();r.add(t.schedule((function(){var e=this;o.next().then((function(t){t.done?n.complete():(n.next(t.value),e.schedule())}))})))}))),r}))}function J(e){return a(e[P])}function G(e){return a(null==e?void 0:e[$])}function K(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function q(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function Q(e){return u(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,c(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,c(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,c(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function V(e){return a(null==e?void 0:e.getReader)}function W(e,t){return t?function(e,t){if(null!=e){if(J(e))return function(e,t){return new D((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[P]();r.add(o.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}(e,t);if(Y(e))return function(e,t){return new D((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(R(e))return function(e,t){return new D((function(n){return t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){n.next(e),n.add(t.schedule((function(){return n.complete()})))})))}),(function(e){n.add(t.schedule((function(){return n.error(e)})))}))}))}))}(e,t);if(K(e))return z(e,t);if(G(e))return function(e,t){return new D((function(n){var r;return n.add(t.schedule((function(){r=e[$](),function(e,t,n,r){void 0===r&&(r=0);var o=t.schedule((function(){try{n.call(this)}catch(t){e.error(t)}}),r);e.add(o)}(n,t,(function(){var e=r.next(),t=e.value;e.done?n.complete():(n.next(t),this.schedule())}))}))),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(V(e))return function(e,t){return z(Q(e),t)}(e,t)}throw q(e)}(e,t):X(e)}function X(e){if(e instanceof D)return e;if(null!=e){if(J(e))return i=e,new D((function(e){var t=i[P]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Y(e))return o=e,new D((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(R(e))return n=e,new D((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,_)}));if(K(e))return Z(e);if(G(e))return t=e,new D((function(e){var n,o;try{for(var i=r(t),c=i.next();!c.done;c=i.next()){var u=c.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{c&&!c.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(V(e))return Z(Q(e))}var t,n,o,i;throw q(e)}function Z(e){return new D((function(t){(function(e,t){var o,i,c,u,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),c={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(f.next(e))}catch(e){t(e)}}function r(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((f=f.apply(a,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function ee(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var te=function(e){function n(t,n,r,o,i){var c=e.call(this,t)||this;return c.onFinalize=i,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t,n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},n}(C);function ne(e,t){return ee((function(n,r){var o=0;n.subscribe(new te(r,(function(n){r.next(e.call(t,n,o++))})))}))}var re=Array.isArray;function oe(e){return ne((function(t){return function(e,t){return re(t)?e.apply(void 0,i([],o(t))):e(t)}(e,t)}))}function ie(e){return e[e.length-1]}function ce(e){return a(ie(e))?e.pop():void 0}function ue(e){return(t=ie(e))&&a(t.schedule)?e.pop():void 0;var t}function ae(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}function se(e,t,n){return void 0===n&&(n=L),function(r){le(t,(function(){for(var o=e.length,i=new Array(o),c=o,u=o,a=function(o){le(t,(function(){var a=W(e[o],t),s=!1;a.subscribe(new te(r,(function(e){i[o]=e,s||(s=!0,u--),u||r.next(n(i.slice()))}),(function(){--c||r.complete()})))}),r)},s=0;s<o;s++)a(s)}),r)}}function le(e,t,n){e?n.add(e.schedule(t)):t()}class fe{constructor(){this.loadDbmsCard()}loadDbmsCard(){this.cardCollectionObservable=this.getAllCardsObservableFromJsonServer("","")}getAllCardsObservableFromJsonServer(e,t){if(t=t.toLowerCase(),""===e)var n=fetch("http://localhost:3000/cards");else n=fetch(`http://localhost:3000/cards?${t}=`+e);return W(n.then((e=>{if(e.ok)return e.json();throw new Error("Cards not found")})).catch((e=>console.log("Error ",e))))}deleteCard(e){return this.cardCollectionObservable.pipe(ne((t=>t.filter((t=>t!==e)))))}checkCardAttributeForSearch(e,t){return"attack"===(t=t.toLowerCase())?e.attack:"deffense"===t?e.deffense:"title"===t?e.title:e.stars}search(e,t){return W(this.cardCollectionObservable.pipe(ne((n=>n.filter((n=>this.checkCardAttributeForSearch(n,t)==e))))))}}const de=new class{constructor(){this.cardCollection=new fe}drawList(){document.getElementById("cardDetail").innerHTML="",document.getElementById("output").innerHTML="",this.cardCollection.cardCollectionObservable.subscribe((e=>{e.forEach(((e,t)=>{this.addItem(e)}))}))}addItem(e){let t=document.createElement("div");document.getElementById("output").appendChild(t),t.className="cardUiStyle",t.id="test";let n=document.createElement("img");n.src=e.imgPath,n.className="cardUiImg",t.appendChild(n);let r=document.createElement("div");r.className="cardInfoDiv",t.appendChild(r);let o=document.createElement("label");o.innerHTML="Name: "+e.title,r.appendChild(o);let i=document.createElement("label");i.innerHTML="Level: "+e.stars,r.appendChild(i);let c=document.createElement("label");c.innerHTML="Attribute: "+e.attribute,r.appendChild(c);let u=document.createElement("label");u.innerHTML=`ATK: ${e.attack} DEF: ${e.deffense}`,r.appendChild(u);let a=document.createElement("div");t.appendChild(a);let s=document.createElement("button");s.className="cardDeleteButton",s.innerHTML="DELETE",a.appendChild(s),t.onclick=()=>{this.divClicked(e)},s.onclick=()=>{this.deleteClicked(e)}}divClicked(e){document.getElementById("cardDetail").innerHTML="";let t=document.createElement("div");t.className="cardDetailDiv",document.getElementById("cardDetail").appendChild(t);let n=document.createElement("img");n.src=e.imgPath,t.appendChild(n)}deleteClicked(e){this.cardCollection.cardCollectionObservable=this.cardCollection.deleteCard(e),this.drawList()}clearCardListDiv(){document.getElementById("output").innerHTML=""}search(e,t){var n;(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=ue(e),r=ce(e),o=U(e),i=o.args,c=o.keys;if(0===i.length)return W([],n);var u=new D(se(i,n,c?function(e){return ae(c,e)}:L));return r?u.pipe(oe(r)):u})([e,t]).pipe((n=e=>this.cardCollection.search(e[1],e[0]),ee((function(e,t){var r=null,o=!1,i=function(){return o&&!r&&t.complete()};e.subscribe(new te(t,(function(e){null==r||r.unsubscribe();0;X(n(e)).subscribe(r=new te(t,(function(e){return t.next(e)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))})))).subscribe((e=>{void 0!==e[0]&&""!==e[0].title&&(document.getElementById("output").innerHTML="",e.forEach((e=>{this.addItem(e)})))}))}};de.drawList();const he=new D((e=>{setInterval((()=>{e.next(document.getElementsByClassName("comboBoxInput")[0].value)}),1e3)})),pe=new D((e=>{setInterval((()=>{e.next(document.getElementsByClassName("searchInput")[0].value)}),1e3)}));de.search(he,pe),document.getElementsByClassName("forceLoadDbmsButton")[0].onclick=()=>{de.cardCollection.loadDbmsCard(),de.drawList()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,