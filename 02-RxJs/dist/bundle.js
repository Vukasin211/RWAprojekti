/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,n){for(var e=0,r=n.length,o=t.length;e<r;e++,o++)t[o]=n[e];return t}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}Object.create,Object.create;var s=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function a(t){return"function"==typeof t}function l(t){return a(null==t?void 0:t.then)}var f,h="function"==typeof Symbol&&Symbol.observable||"@@observable",d=((f=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function p(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=r(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(n){t={error:n}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(a(h))try{h()}catch(t){c=t instanceof d?t.errors:[t]}var p=this._teardowns;if(p){this._teardowns=null;try{for(var v=r(p),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(t){c=null!=c?c:[],t instanceof d?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(e)throw e.error}}}if(c)throw new d(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)b(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&p(n,t)},t.prototype.remove=function(n){var e=this._teardowns;e&&p(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function y(t){return t instanceof v||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function b(t){a(t)?t():t.unsubscribe()}v.EMPTY;var m=null,w=null,_=void 0,g=!1,E=!1,x={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=x.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,i([],o(t)))},clearTimeout:function(t){var n=x.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function S(t){x.setTimeout((function(){if(!m)throw t;m(t)}))}function I(){}var T=A("C",void 0,void 0);function A(t,n,e){return{kind:t,value:n,error:e}}var P=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,y(n)&&n.add(e)):e.destination=O,e}return n(e,t),e.create=function(t,n,e){return new k(t,n,e)},e.prototype.next=function(t){this.isStopped?j(function(t){return A("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?j(A("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?j(T,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(v),k=function(t){function e(n,e,r){var o,i=t.call(this)||this;if(a(n))o=n;else if(n){var u;o=n.next,e=n.error,r=n.complete,i&&E?(u=Object.create(n)).unsubscribe=function(){return i.unsubscribe()}:u=n,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?C(o,i):I,error:C(null!=e?e:L,i),complete:r?C(r,i):I},i}return n(e,t),e}(P);function C(t,n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,i([],o(e)))}catch(t){if(g){if(!n._syncErrorHack_isSubscribing)throw t;n.__syncError=t}else S(t)}}}function L(t){throw t}function j(t,n){var e=w;e&&x.setTimeout((function(){return e(t,n)}))}var O={closed:!0,next:I,error:L,complete:I};function H(t){return t}function M(t){return 0===t.length?H:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var N=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=(r=t)&&r instanceof P||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(r)&&y(r)?t:new k(t,n,e);if(g)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var n=t;n._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)t.add(e.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){n.__syncError=t}for(var r=n;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}n._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=B(n))((function(n,r){var o;o=e.subscribe((function(n){try{t(n)}catch(t){r(t),null==o||o.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[h]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.length?M(t)(this):this},t.prototype.toPromise=function(t){var n=this;return new(t=B(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function B(t){var n;return null!==(n=null!=t?t:_)&&void 0!==n?n:Promise}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(t){return a(t[h])}function Y(t){return a(null==t?void 0:t[D])}function F(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}function R(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function q(t){return c(this,arguments,(function(){var n,r,o;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(n.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function z(t){return a(null==t?void 0:t.getReader)}function $(t){if(t instanceof N)return t;if(null!=t){if(U(t))return o=t,new N((function(t){var n=o[h]();if(a(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(s(t))return G(t);if(l(t))return e=t,new N((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,S)}));if(F(t))return K(t);if(Y(t))return n=t,new N((function(t){var e,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if(z(t))return K(q(t))}var n,e,o;throw R(t)}function G(t){return new N((function(n){for(var e=0;e<t.length&&!n.closed;e++)n.next(t[e]);n.complete()}))}function K(t){return new N((function(n){(function(t,n){var o,i,u,c;return function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}s((r=r.apply(t,n||[])).next())}))}(this,void 0,void 0,(function(){var s,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))}))})(t,n).catch((function(t){return n.error(t)}))}))}function J(t){return function(n){if(function(t){return a(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var Q=function(t){function e(n,e,r,o,i){var u=t.call(this,n)||this;return u.onFinalize=i,u._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(e,t),e.prototype.unsubscribe=function(){var n,e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))},e}(P);function V(t,n){return J((function(e,r){var o=0;e.subscribe(new Q(r,(function(e){r.next(t.call(n,e,o++))})))}))}function W(t,n,e){return void 0===e&&(e=1/0),a(n)?W((function(e,r){return V((function(t,o){return n(e,t,r,o)}))($(t(e,r)))}),e):("number"==typeof n&&(e=n),J((function(n,r){return function(t,n,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||n.complete()},d=function(t){return a<r?p(t):s.push(t)},p=function(t){a++;var o=!1;$(e(t,l++)).subscribe(new Q(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)t=void 0,t=s.shift(),p(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(new Q(n,d,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var X=Array.isArray;var Z=["addListener","removeListener"],tt=["addEventListener","removeEventListener"],nt=["on","off"];function et(t,n){return function(e){return function(r){return t[e](n,r)}}}var rt=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(v),ot={setInterval:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=ot.delegate;return((null==e?void 0:e.setInterval)||setInterval).apply(void 0,i([],o(t)))},clearInterval:function(t){var n=ot.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},it=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),ot.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;ot.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(rt),ut={now:function(){return(ut.delegate||Date).now()},delegate:void 0},ct=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=ut.now,t}(),st=new(function(t){function e(n,e){void 0===e&&(e=ct.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(ct))(it);const at="http://localhost:3000/";function lt(t){let n=document.createElement("div");document.getElementById("output").appendChild(n),n.className="cardUiStyle",n.id="test";let e=document.createElement("img");e.src=t.imgPath,e.className="cardUiImg",n.appendChild(e);let r=document.createElement("div");r.className="cardInfoDiv",n.appendChild(r);let o=document.createElement("label");o.innerHTML="Name: "+t.title,r.appendChild(o);let i=document.createElement("label");i.innerHTML="Level: "+t.stars,r.appendChild(i);let u=document.createElement("label");u.innerHTML="Description: "+t.description,r.appendChild(u);let c=document.createElement("label");c.innerHTML=`ATK: ${t.attack} DEF: ${t.deffense}`,r.appendChild(c)}function ft(t){if(""===t)var n=fetch(at+"cards");else n=fetch(at+"cards?title="+t);return $(n.then((t=>{if(t.ok)return t.json();throw new Error("Cards not found")})).catch((t=>console.log("Error ",t))))}const ht=ft("").subscribe((t=>{t.forEach(((t,n)=>{lt(t)}))}));var dt,pt,vt;(function t(n,e,r,u){if(a(r)&&(u=r,r=void 0),u)return t(n,e,r).pipe((c=u,V((function(t){return function(t,n){return X(n)?t.apply(void 0,i([],o(n))):t(n)}(c,t)}))));var c,l=o(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(n)?tt.map((function(t){return function(o){return n[t](e,o,r)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(n)?Z.map(et(n,e)):function(t){return a(t.on)&&a(t.off)}(n)?nt.map(et(n,e)):[],2),f=l[0],h=l[1];if(!f&&s(n))return W((function(n){return t(n,e,r)}))(G(n));if(!f)throw new TypeError("Invalid event target");return new N((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return f(n),function(){return h(n)}}))})(document.getElementsByClassName("searchInput"),"input").pipe((1e3,void 0===vt&&(vt=st),J((function(t,n){var e=null,r=null,o=null,i=function(){if(e){e.unsubscribe(),e=null;var t=r;r=null,n.next(t)}};function u(){var t=o+1e3,n=vt.now();n<t?e=this.schedule(void 0,t-n):i()}t.subscribe(new Q(n,(function(t){r=t,o=vt.now(),e||(e=vt.schedule(u,1e3))}),(function(){i(),n.complete()}),void 0,(function(){r=e=null})))}))),V((t=>t.target.value)),(pt=t=>t.length>=3,J((function(t,n){var e=0;t.subscribe(new Q(n,(function(t){return pt.call(undefined,t,e++)&&n.next(t)})))}))),(dt=t=>ft(t),J((function(t,n){var e=null,r=!1,o=function(){return r&&!e&&n.complete()};t.subscribe(new Q(n,(function(t){null==e||e.unsubscribe();0;$(dt(t)).subscribe(e=new Q(n,(function(t){return n.next(t)}),(function(){e=null,o()})))}),(function(){r=!0,o()})))}))),V((t=>t[0]))).subscribe((t=>{ht.unsubscribe,document.getElementById("output").innerHTML="",void 0!==t?lt(t):alert("Card not found")})),document.getElementsByClassName("searchButton")[0].onclick=()=>{}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,